# This file is part of the ACTS project.
#
# Copyright (C) 2016 CERN for the benefit of the ACTS project
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# This script sets up the ACTS environment without dependencies in a somewhat robust way.

IS_INSTALLED_VERSION="@IS_INSTALLED_VERSION@"
CMAKE_INSTALL_PREFIX="@CMAKE_INSTALL_PREFIX@"
CMAKE_INSTALL_BINDIR="@CMAKE_INSTALL_BINDIR@"
CMAKE_INSTALL_LIBDIR="@CMAKE_INSTALL_LIBDIR@"
PROJECT_SOURCE_DIR="@PROJECT_SOURCE_DIR@"
ACTS_BUILD_EXAMPLES_PYTHON_BINDINGS="@ACTS_BUILD_EXAMPLES_PYTHON_BINDINGS@"
ODD_PATH="@ODD_SOURCE_DIR@"
ODD_FACTORY_DIR="@ODD_FACTORY_DIR@"

if [ -n "${ZSH_VERSION:-}" ]; then
    script_dir=${0:a:h}
elif [ -n "${BASH_VERSION:-}" ]; then
    script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
else
    # If the current shell is not ZSH or Bash, we can't guarantee that the
    # script will work, so we throw an error.
    echo "ERROR:   neither ZSH nor Bash was detected, other shells are not supported. The environment has not been modified."
    exit 1
fi

# Make ACTS binaries available
# detect if we are installed as there is no lib subdirectory
if [[ "${IS_INSTALLED_VERSION}" == "ON" ]]; then
    script_dir=$( cd -- "${script_dir}" &> /dev/null && cd .. &> /dev/null && pwd )

    export PATH="${script_dir}/bin:${PATH}"
    export LD_LIBRARY_PATH="${script_dir}/lib:${LD_LIBRARY_PATH}"
    export DYLD_LIBRARY_PATH="${script_dir}/lib:${DYLD_LIBRARY_PATH}"

else
    # the ${VAR:+:} part adds a double colon only if VAR is not empty
    export PATH="${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}${PATH:+:}${PATH}"
    export LD_LIBRARY_PATH="${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH}"
    export DYLD_LIBRARY_PATH="${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${DYLD_LIBRARY_PATH:+:}${DYLD_LIBRARY_PATH}"


    # Make ODD available if possible
    # This seems to be only reliable on Linux for now, not on MacOS
    # We only do this in build-mode because in install mode ODD should be installed 
    # in the install tree
    echo "${ODD_PATH}"
    if [ -d "${ODD_PATH}" ]; then
        echo "INFO:    Found OpenDataDetector and set it up"
        export ODD_PATH
        if [ -d "${ODD_FACTORY_DIR}" ]; then
            export LD_LIBRARY_PATH="${ODD_FACTORY_DIR}:${LD_LIBRARY_PATH}"
            export DYLD_LIBRARY_PATH="${ODD_FACTORY_DIR}:${DYLD_LIBRARY_PATH}"
            export DD4HEP_LIBRARY_PATH="${ODD_FACTORY_DIR}:${DD4HEP_LIBRARY_PATH}"
        fi
    else
        echo "INFO:    OpenDataDetector directory not found, ODD not set up"
    fi
fi

# ACTS project source directory
export ACTS_SOURCE_DIR="${PROJECT_SOURCE_DIR}"


# Make Python bindings available if possible
# first check if python bindings are enabled then check if the setup.sh file exists
if [ "${ACTS_BUILD_EXAMPLES_PYTHON_BINDINGS}" = "ON" ]; then
    if [[ -f "${script_dir}/python/setup.sh" ]]; then
      source "${script_dir}/python/setup.sh"
    else
      echo "ERROR:   setup.sh for python and ODD is missing."
      exit 1
    fi
else
  echo "INFO:    Python bindings are disabled."
fi
