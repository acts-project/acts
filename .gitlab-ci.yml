variables:
  CCACHE_DIR: ${CI_PROJECT_DIR}/ccache
  CCACHE_MAXSIZE: 2G
  CCACHE_KEY_SUFFIX: r1
  CTEST_OUTPUT_ON_FAILURE: 1

clang_tidy:
  stage: build
  image: ghcr.io/acts-project/ubuntu2404:58
  tags:
    - large
  artifacts:
    paths:
      - src/clang-tidy/
    when: always
    expire_in: 1 week
  script:
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - >
        apt-get update
        && apt-get install -y clang-tidy-18
        && ln -sf /usr/bin/clang++-18 /usr/bin/clang++
        && ln -sf /usr/bin/clang-18 /usr/bin/clang
        && ln -sf /usr/bin/clang-tidy-18 /usr/bin/clang-tidy
    - >
        cmake -B build -S .
        --preset=gitlab-ci-clangtidy
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DACTS_RUN_CLANG_TIDY=ON
        -DACTS_BUILD_ODD=OFF

    # Main clang-tidy run during cmake compilation
    - CI/clang_tidy/run_clang_tidy.sh clang-tidy build

    # Install dependencies for processing scripts
    - pip install -r CI/clang_tidy/requirements.txt

    # Parse the main clang-tidy run
    - >
        CI/clang_tidy/parse_clang_tidy.py
        clang-tidy/clang-tidy.log
        clang-tidy/clang-tidy.json
        --exclude "*thirdparty*"
        --exclude "*ActsPodioEdm*"
        --exclude "*build/_deps/*"

    # Check the combined report against the defined limits
    - CI/clang_tidy/check_clang_tidy.py --report clang-tidy/clang-tidy.json --config CI/clang_tidy/limits.yml

    # Generate an html report
    - codereport clang-tidy/clang-tidy.json clang-tidy/html

build_exatrkx_cpu:
  stage: build
  image: ghcr.io/acts-project/ubuntu2204_exatrkx:58
  tags:
    - large

  cache:
    key: ccache-exatrkx-cpu-$CI_COMMIT_REF_SLUG
    paths:
      - ${CI_PROJECT_DIR}/ccache

  script:
    - export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
    - export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
    - export TORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0"
    - echo $PATH
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - cd ..
    - mkdir build
    # Here we only do a minimal build without examples to save ressources
    - >
      cmake -B build -S src
      --preset=gitlab-ci-exatrkx
      -DACTS_EXATRKX_ENABLE_CUDA=OFF

    - ccache -z
    - cmake --build build -- -j2
    - ccache -s

build_exatrkx:
  stage: build
  image: ghcr.io/acts-project/ubuntu2204_exatrkx:58
  tags:
    - large

  cache:
    key: ccache-exatrkx-$CI_COMMIT_REF_SLUG
    paths:
      - ${CI_PROJECT_DIR}/ccache

  artifacts:
    paths:
      - build/
    exclude:
      - build/**/*.o
      - build/bin/ActsIntegrationTest*
    expire_in: 6 hours

  script:
    - export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
    - export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
    - export TORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0"
    - echo $PATH
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - cd ..
    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci-exatrkx
      -DCMAKE_CUDA_ARCHITECTURES="75;86"

    - ccache -z
    - cmake --build build -- -j2
    - ccache -s

# test_exatrkx_unittests:
#   stage: test
#   needs:
#     - build_exatrkx
#   image: ghcr.io/acts-project/ubuntu2204_exatrkx:58
#   tags:
#     - docker-gpu-nvidia
#   script:
#     - ctest --test-dir build -R ExaTrkX
#
# test_exatrkx_python:
#   stage: test
#   needs:
#     - build_exatrkx
#   image: ghcr.io/acts-project/ubuntu2204_exatrkx:58
#   tags:
#     - docker-gpu-nvidia
#   script:
#     - apt-get update -y
#     - apt-get install -y python3 libxxhash0
#     - source build/this_acts_withdeps.sh
#     - git clone $CLONE_URL src
#     - cd src
#     - git checkout $HEAD_SHA
#     - pip3 install -r Examples/Python/tests/requirements_ubuntu2004.txt
#     - nvidia-smi
#     - pytest -rFsv -k test_exatrkx

build_linux_ubuntu:
  stage: build
  image: ghcr.io/acts-project/ubuntu2404:58

  cache:
    key: ccache-${CI_JOB_NAME_SLUG}-${HEAD_REF}-${CCACHE_KEY_SUFFIX}
    when: 'always'
    paths:
      - ${CI_PROJECT_DIR}/ccache

  artifacts:
    paths:
      - build/
    exclude:
      - build/bin/ActsUnitTest*
      - build/bin/ActsIntegrationTest*
      - build/**/*.o
    expire_in: 1 day

  script:
    - echo $PATH
    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update

    - cd ..
    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci
      -DACTS_BUILD_PLUGIN_ONNX=ON

    - ccache -z
    - cmake --build build -- -j2
    - ccache -s

linux_test_examples:
  stage: test
  image: ghcr.io/acts-project/ubuntu2404:58
  needs: [build_linux_ubuntu]

  script:
    - apt-get update && apt-get install -y git-lfs

    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - cd ..

    - /usr/local/bin/geant4-config --install-datasets
    - source build/this_acts_withdeps.sh
    - cd src
    - pip3 install -r Examples/Python/tests/requirements.txt
    - pytest -rFsv -k "not exatrkx" -v -s

linux_physmon:
  stage: test
  image: ghcr.io/acts-project/ubuntu2404:58
  needs: [build_linux_ubuntu]

  artifacts:
    when: always
    paths:
      - src/physmon
    expire_in: 1 week

  script:
    - apt-get update && apt-get install -y git-lfs time

    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - cd ..

    - git config --global safe.directory "$GITHUB_WORKSPACE"
    - pip3 install histcmp==0.6.7 matplotlib
    - pip3 install -r src/Examples/Scripts/requirements.txt
    - /usr/local/bin/geant4-config --install-datasets
    - source build/this_acts_withdeps.sh
    - cd src
    - CI/physmon/phys_perf_mon.sh all physmon

###############################
### UBUNTU EXTRA JOB MATRIX ###
###############################

.linux_ubuntu_extra: &linux_ubuntu_extra
  variables:
    INSTALL_DIR: ${CI_PROJECT_DIR}/install

  stage: build

  cache:
    key: ccache-${CI_JOB_NAME_SLUG}-${HEAD_REF}-${CCACHE_KEY_SUFFIX}
    when: 'always'
    paths:
      - ${CI_PROJECT_DIR}/ccache

  script:
    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update

    - cd ..
    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci
      -DCMAKE_CXX_STANDARD=${CXXSTD}

    - ccache -z
    - cmake --build build -- -j2
    - ccache -s

    - ctest --test-dir build -j$(nproc)
    - cmake --build build --target integrationtests

    # Install main project
    - cmake --install build

    # Downstream configure
    - >
      cmake -B build-downstream -S src/Tests/DownstreamProject
      -GNinja
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_FLAGS=-Werror
      -DCMAKE_CXX_STANDARD=${CXXSTD}
      -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"

    # Downstream build
    - cmake --build build-downstream

    # Downstream run
    - ./build-downstream/bin/ShowActsVersion

linux_ubuntu_2404:
  <<: *linux_ubuntu_extra
  variables:
    CXXSTD: 20
  image: ghcr.io/acts-project/ubuntu2404:58

linux_ubuntu_2204_clang:
  <<: *linux_ubuntu_extra
  variables:
    CXXSTD: 20
  image: ghcr.io/acts-project/ubuntu2204_clang:58


######################
### LCG JOB MATRIX ###
######################

.lcg: &lcg_base_job
  image: ghcr.io/acts-project/${OS}-base:58
  stage: build
  tags:
    - cvmfs

  variables:
    ACTS_LOG_FAILURE_THRESHOLD: WARNING
    INSTALL_DIR: ${{ github.workspace }}/install

    SETUP:

  cache:
    key: ccache-${CI_JOB_NAME_SLUG}-${HEAD_REF}-${CCACHE_KEY_SUFFIX}
    when: 'always'
    paths:
      - ${CI_PROJECT_DIR}/ccache

  before_script:
    - 'echo "LCG_VERSION: ${LCG_VERSION}"'
    - 'echo "COMPILER: ${COMPILER}"'

    # Figure out LCG platform name based on version number and OS
    - >
      if [ "$OS" = "alma9"  ]; then
        if [ "$LCG_VERSION" -ge "104" ]; then
          export LCG_PLATFORM="el9"
        else
          export LCG_PLATFORM="centos9"
        fi
      else
        export LCG_PLATFORM="$OS"
      fi

    - 'echo "LCG_PLATFORM: ${LCG_PLATFORM}"'
    - source /cvmfs/sft.cern.ch/lcg/views/LCG_${LCG_VERSION}/x86_64-${LCG_PLATFORM}-${COMPILER}-opt/setup.sh

    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - cd ..

    - ccache --version

  script:
    - >
      cmake -B build -S src
      --preset=gitlab-ci
      -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
      -DACTS_BUILD_PLUGIN_GEOMODEL=OFF # GeoModel is not in LCG at this point

    - ccache -z
    - cmake --build build -- -j2
    - ccache -s

    - ctest --test-dir build -j$(nproc)


lcg_105:
  <<: *lcg_base_job

  variables:
    LCG_VERSION: "105"

  parallel:
    matrix:
      - OS: [alma9]
        COMPILER:
          - gcc13
          - clang16
