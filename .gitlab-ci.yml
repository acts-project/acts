variables:
  CCACHE_DIR: ${CI_PROJECT_DIR}/ccache
  CCACHE_MAXSIZE: 2G
  CCACHE_KEY_SUFFIX: r2
  CTEST_OUTPUT_ON_FAILURE: 1

  SPACK_VERSION: develop-2025-07-06
  SPACK_REPO_VERSION: develop-2025-07-13
  LOCKFILE_CACHE_DIR: ${CI_PROJECT_DIR}/spack_lockfile_cache

  DEPENDENCY_TAG: v11.1.0

# Use hidden keys for referencing later, this allows single definition + composition
.ccache_cache:
  cache:
    - key: ccache-${CI_JOB_NAME}-${CCACHE_KEY_SUFFIX}-${REPO_SLUG}_${HEAD_REF}
      fallback_keys:
        - ccache-${CI_JOB_NAME}-${CCACHE_KEY_SUFFIX}-https://github.com/acts-project/acts.git-main
      when: always
      paths:
        - ${CCACHE_DIR}

.spack_cache:
  cache:
   - key:
       files:
         - CI/dependencies/setup_spack.sh
       prefix: spack_${SPACK_VERSION}_${SPACK_REPO_VERSION}
     paths:
      - spack
      - .spack
   - key:
       files:
        - spack_lockfile_cache/digest.txt
       prefix: spack_lockfile_
     paths:
      - spack_lockfile_cache

.spack_cleanup:
  after_script:
    - rm -rf spack/.git spack/opt spack/var/spack/cache
    - find spack -type f -name "*.pyc" -delete || true


# Use references from above to define the separate and a combined base job,
# which other jobs can then inherit from
.ccache_base:
  cache:
   - !reference [.ccache_cache, cache]

.spack_base:
  cache:
   - !reference [.spack_cache, cache]

  after_script:
   - !reference [.spack_cleanup, after_script]

.ccache_and_spack_base:
  cache:
   - !reference [.ccache_cache, cache]
   - !reference [.spack_cache, cache]

  after_script:
   - !reference [.spack_cleanup, after_script]

include:
  - local: CI/gitlab/exatrkx.yml
  - local: CI/gitlab/ubuntu.yml
  - local: CI/gitlab/lcg.yml
  - local: CI/gitlab/clang_tidy.yml
