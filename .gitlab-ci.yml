variables:
  CCACHE_DIR: ${CI_PROJECT_DIR}/ccache
  CCACHE_MAXSIZE: 2G
  CCACHE_KEY_SUFFIX: r2
  CTEST_OUTPUT_ON_FAILURE: 1

  SPACK_VERSION: develop-2025-04-20
  LOCKFILE_CACHE_DIR: ${CI_PROJECT_DIR}/spack_lockfile_cache

  DEPENDENCY_TAG: v9.0.0

.ccache_base:
  cache:
    - key: ccache-${CI_JOB_NAME}-${CCACHE_KEY_SUFFIX}-${REPO_SLUG}_${HEAD_REF}
      fallback_keys:
        - ccache-${CI_JOB_NAME}-${CCACHE_KEY_SUFFIX}-https://github.com/acts-project/acts.git-main
      when: always
      paths:
        - ${CCACHE_DIR}

.spack_cache:
  cache:
   - key:
       files:
         - CI/dependencies/setup_spack.sh
       prefix: spack_${SPACK_VERSION}
     paths:
      - spack
      - .spack
   - key:
       files:
        - spack_lockfile_cache/digest.txt
       prefix: spack_lockfile_
     paths:
      - spack_lockfile_cache

.spack_cleanup:
  after_script:
    - rm -rf spack/.git spack/opt spack/var/spack/cache
    - find spack -type f -name "*.pyc" -delete || true

clang_tidy:
  stage: build
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2404:74
  tags:
    - large
  artifacts:
    paths:
      - src/clang-tidy/
    when: always
    expire_in: 1 week

  cache:
   - !reference [.spack_cache, cache]

  script:
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - >
        apt-get update
        && apt-get install -y clang-tidy-18
        && ln -sf /usr/bin/clang++-18 /usr/bin/clang++
        && ln -sf /usr/bin/clang-18 /usr/bin/clang
        && ln -sf /usr/bin/clang-tidy-18 /usr/bin/clang-tidy

    - |
      CI/dependencies/setup.sh -c clang++ -e .env
      source .env

    - >
        cmake -B build -S .
        --preset=gitlab-ci-clangtidy
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang

    # Main clang-tidy run during cmake compilation
    - CI/clang_tidy/run_clang_tidy.sh clang-tidy build

    # Install dependencies for processing scripts
    - python3 -m pip install -r CI/clang_tidy/requirements.txt

    # Parse the main clang-tidy run
    - >
        CI/clang_tidy/parse_clang_tidy.py
        clang-tidy/clang-tidy.log
        clang-tidy/clang-tidy.json
        --exclude "*thirdparty*"
        --exclude "*ActsPodioEdm*"
        --exclude "*build/_deps/*"

    # Check the combined report against the defined limits
    - CI/clang_tidy/check_clang_tidy.py --report clang-tidy/clang-tidy.json --config CI/clang_tidy/limits.yml

    # Generate an html report
    - codereport clang-tidy/clang-tidy.json clang-tidy/html

  after_script:
   - !reference [.spack_cleanup, after_script]

build_exatrkx_cpu:
  stage: build
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2204_exatrkx:74
  tags:
    - large

  cache:
   - !reference [.ccache_base, cache]
   - !reference [.spack_cache, cache]

  script:
    - export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
    - export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
    - export TORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0"
    - echo $PATH
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env

    - cd ..
    - mkdir build
    # Here we only do a minimal build without examples to save resources
    - >
      cmake -B build -S src
      --preset=gitlab-ci-exatrkx
      -DACTS_EXATRKX_ENABLE_CUDA=OFF

    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

  after_script:
   - !reference [.spack_cleanup, after_script]

build_exatrkx:
  stage: build
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2204_exatrkx:74
  tags:
    - large

  cache:
   - !reference [.ccache_base, cache]
   - !reference [.spack_cache, cache]

  artifacts:
    paths:
      - build/
    exclude:
      - build/**/*.o
      - build/bin/ActsIntegrationTest*
    expire_in: 6 hours

  script:
    - export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
    - export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
    - export TORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0"
    - echo $PATH
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - cd ..
    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci-exatrkx
      -DCMAKE_CUDA_ARCHITECTURES="75;86"

    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

  after_script:
   - !reference [.spack_cleanup, after_script]

test_exatrkx_unittests:
  stage: test
  needs:
    - build_exatrkx
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2204_exatrkx:74
  tags:
    - docker-gpu-nvidia

  cache:
   - !reference [.spack_cache, cache]
  script:

    - apt-get update -y
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - cd ..
    - ctest --test-dir build -R "(ExaTrkX|ConnectedComponentsCuda)"

  after_script:
   - !reference [.spack_cleanup, after_script]

test_exatrkx_python:
  stage: test
  needs:
    - build_exatrkx
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2204_exatrkx:74
  tags:
    - docker-gpu-nvidia

  cache:
   - !reference [.spack_cache, cache]

  script:
    - apt-get update -y
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - nvidia-smi
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - source ../build/this_acts_withdeps.sh
    - python3 -m pip install -r Examples/Python/tests/requirements.txt
    - echo $PYTHONPATH
    - which python3
    - python3 --version
    - python3 -c "import acts"
    - pytest -rFv -k torch --collect-only
    - pytest -rFv -k gpu # For now only test torch GPU pipeline

  after_script:
   - !reference [.spack_cleanup, after_script]

build_gnn_tensorrt:
  stage: build
  image: ghcr.io/acts-project/ubuntu2404_tensorrt:74

  cache:
    - !reference [.spack_cache, cache]
    - !reference [.ccache_base, cache]

  tags:
    - docker-gpu-nvidia

  script:
    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - cd ..
    - mkdir build
    - >
      cmake -B build -S src --preset gitlab-ci-tensorrt
      -DCMAKE_CUDA_ARCHITECTURES="75;86"
    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

  after_script:
   - !reference [.spack_cleanup, after_script]

build_linux_ubuntu:
  stage: build
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2404:74

  cache:
   - !reference [.ccache_base, cache]
   - !reference [.spack_cache, cache]

  artifacts:
    paths:
      - build/
    exclude:
      - build/bin/ActsUnitTest*
      - build/bin/ActsIntegrationTest*
      - build/**/*.o
    expire_in: 1 day

  script:
    - echo $PATH
    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update

    - cd ..

    - |
      src/CI/dependencies/setup.sh -c g++ -e .env
      source .env

    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci
      -DACTS_BUILD_PLUGIN_ONNX=ON

    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

    - ctest --test-dir build -j$(nproc)
    - cmake --build build --target integrationtests

    # Install main project
    - cmake --install build

    # Downstream configure
    - >
      cmake -B build-downstream -S src/Tests/DownstreamProject
      -GNinja
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_FLAGS=-Werror
      -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"

    # Downstream build
    - cmake --build build-downstream

    # Downstream run
    - ./build-downstream/bin/ShowActsVersion

  after_script:
   - !reference [.spack_cleanup, after_script]

linux_test_examples:
  stage: test
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2404:74
  needs: [build_linux_ubuntu]

  cache:
   - !reference [.spack_cache, cache]

  script:
    - apt-get update && apt-get install -y git-lfs

    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - cd ..

    - geant4-config --install-datasets
    - source build/this_acts_withdeps.sh
    - cd src
    - python3 -m pip install -r Examples/Python/tests/requirements.txt
    - pytest -rFv -k "not exatrkx"

  after_script:
   - !reference [.spack_cleanup, after_script]

linux_physmon:
  stage: test
  needs: [build_linux_ubuntu]
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2404:74

  artifacts:
    when: always
    paths:
      - src/physmon
    expire_in: 1 week

  cache:
   - !reference [.spack_cache, cache]

  script:
    - apt-get update && apt-get install -y git-lfs time

    - git clone $CLONE_URL src
    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - |
      CI/dependencies/setup.sh -c g++ -e .env
      source .env
    - cd ..

    - git config --global safe.directory "$GITHUB_WORKSPACE"
    - python3 -m pip install histcmp==0.8.1 matplotlib
    - python3 -m pip install -r src/Examples/Scripts/requirements.txt
    - geant4-config --install-datasets
    - venv_python=$(which python3)
    - echo $venv_python
    - source build/this_acts_withdeps.sh
    - export PATH=$(dirname $venv_python):$PATH
    - echo $PATH
    - which python3
    - cd src
    - CI/physmon/phys_perf_mon.sh all physmon

  after_script:
   - !reference [.spack_cleanup, after_script]

###############################
### UBUNTU EXTRA JOB MATRIX ###
###############################

.linux_ubuntu_extra:
  variables:
    INSTALL_DIR: ${CI_PROJECT_DIR}/install

  stage: build

  cache:
   - !reference [.ccache_base, cache]
   - !reference [.spack_cache, cache]

  script:
    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - |
      CI/dependencies/setup.sh -c ${CXX} -e .env
      source .env

    - cd ..
    - mkdir build
    - >
      cmake -B build -S src
      --preset=gitlab-ci
      -DCMAKE_CXX_STANDARD=${CXXSTD}
      -DCMAKE_CXX_COMPILER=${CXX}

    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

    - ctest --test-dir build -j$(nproc)
    - cmake --build build --target integrationtests

    # Install main project
    - cmake --install build > install.log

    # Downstream configure
    - >
      cmake -B build-downstream -S src/Tests/DownstreamProject
      -GNinja
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_FLAGS=-Werror
      -DCMAKE_CXX_STANDARD=${CXXSTD}
      -DCMAKE_CXX_COMPILER=${CXX}
      -DCMAKE_PREFIX_PATH="${INSTALL_DIR}"

    # Downstream build
    - cmake --build build-downstream

    # Downstream run
    - ./build-downstream/bin/ShowActsVersion

  after_script:
   - !reference [.spack_cleanup, after_script]

linux_ubuntu_2204:
  extends: .linux_ubuntu_extra
  variables:
    CXX: g++
    CXXSTD: 20
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2204:74

linux_ubuntu_2404_clang19:
  extends: .linux_ubuntu_extra
  variables:
    CXX: clang++-19
    CXXSTD: 20
  image: registry.cern.ch/ghcr.io/acts-project/ubuntu2404_clang19:74


######################
### LCG JOB MATRIX ###
######################

.lcg_base_job:
  image: registry.cern.ch/ghcr.io/acts-project/${OS}-base:74
  stage: build
  tags:
    - cvmfs

  variables:
    ACTS_LOG_FAILURE_THRESHOLD: WARNING
    INSTALL_DIR: ${{ github.workspace }}/install

    SETUP:

  cache:
   - !reference [.ccache_base, cache]

  before_script:
    - 'echo "LCG_VERSION: ${LCG_VERSION}"'
    - 'echo "COMPILER: ${COMPILER}"'

    # Figure out LCG platform name based on version number and OS
    - >
      if [ "$OS" = "alma9"  ]; then
        export LCG_PLATFORM="el9"
      else
        export LCG_PLATFORM="$OS"
      fi

    - 'echo "LCG_PLATFORM: ${LCG_PLATFORM}"'
    - source /cvmfs/sft.cern.ch/lcg/views/LCG_${LCG_VERSION}/x86_64-${LCG_PLATFORM}-${COMPILER}-opt/setup.sh

    - git clone $CLONE_URL src

    - cd src
    - git checkout $HEAD_SHA
    - git submodule init
    - git submodule update
    - cd ..

    - ccache --version

  script:
    - >
      cmake -B build -S src
      --preset=gitlab-ci-lcg
      -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"

    - ccache -z
    - cmake --build build -- -j6
    - ccache -s

    - ctest --test-dir build -j$(nproc)


lcg_105:
  extends: .lcg_base_job

  variables:
    LCG_VERSION: "105"

  parallel:
    matrix:
      - OS: [alma9]
        COMPILER:
          - gcc13
          - clang16

lcg_106a:
  extends: .lcg_base_job

  variables:
    LCG_VERSION: "106a"

  parallel:
    matrix:
      - OS: [alma9]
        COMPILER:
          - gcc13
          - gcc14
          - clang16

lcg_107:
  extends: .lcg_base_job

  variables:
    LCG_VERSION: "107"

  parallel:
    matrix:
      - OS: [alma9]
        COMPILER:
          - gcc13
          - gcc14
          - clang19
